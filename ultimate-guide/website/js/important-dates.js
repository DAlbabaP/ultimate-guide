// ===== –í–ò–î–ñ–ï–¢ –í–ê–ñ–ù–´–• –î–ê–¢ =====

const ImportantDates = {
  // –ë–∞–∑–∞ –≤–∞–∂–Ω—ã—Ö –¥–∞—Ç –¥–ª—è –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–≤ (–æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –≥–æ–¥)
  DATES: [
    {
      id: 'application-start',
      title: '–ù–∞—á–∞–ª–æ –ø—Ä–∏–µ–º–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤',
      period: '20 –∏—é–Ω—è - 25 –∏—é–ª—è 2025',
      date: '2025-06-20',
      description: '–û—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ø–æ–¥–∞—á–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –ø—Ä–∏–µ–º–Ω—É—é –∫–æ–º–∏—Å—Å–∏—é',
      icon: 'üìù',
      type: 'start',
      priority: 'high'
    },
    {
      id: 'application-end',
      title: '–û–∫–æ–Ω—á–∞–Ω–∏–µ –ø—Ä–∏–µ–º–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤',
      period: '–¥–æ 25 –∏—é–ª—è 2025, 18:00',
      date: '2025-07-25',
      time: '18:00',
      description: '–ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –ø–æ–¥–∞—á–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –æ–Ω–ª–∞–π–Ω –∏ –æ—á–Ω–æ',
      icon: '‚è∞',
      type: 'deadline',
      priority: 'critical'
    },
    {
      id: 'consent-deadline',
      title: '–ü–æ–¥–∞—á–∞ —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ',
      period: '–¥–æ 26 –∏—é–ª—è 2025, 18:00',
      date: '2025-07-26',
      time: '18:00',
      description: '–ö—Ä–∞–π–Ω–∏–π —Å—Ä–æ–∫ –ø–æ–¥–∞—á–∏ —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ',
      icon: '‚úÖ',
      type: 'deadline',
      priority: 'critical'
    },
    {
      id: 'enrollment-start',
      title: '–ù–∞—á–∞–ª–æ –∑–∞—á–∏—Å–ª–µ–Ω–∏—è',
      period: '1-20 –∞–≤–≥—É—Å—Ç–∞ 2025',
      date: '2025-08-01',
      description: '–ü–æ–¥–∞—á–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ –¥–æ–≥–æ–≤–æ—Ä–æ–≤',
      icon: 'üéì',
      type: 'start',
      priority: 'high'
    },
    {
      id: 'dormitory-settlement',
      title: '–ó–∞—Å–µ–ª–µ–Ω–∏–µ –≤ –æ–±—â–µ–∂–∏—Ç–∏—è',
      period: '25 –∞–≤–≥—É—Å—Ç–∞ - 5 —Å–µ–Ω—Ç—è–±—Ä—è 2025',
      date: '2025-08-25',
      description: '–ù–∞—á–∞–ª–æ –∑–∞—Å–µ–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≤ –æ–±—â–µ–∂–∏—Ç–∏—è',
      icon: 'üè†',
      type: 'start',
      priority: 'medium'
    },
    {
      id: 'academic-year-start',
      title: '–î–µ–Ω—å –∑–Ω–∞–Ω–∏–π',
      date: '2025-09-01',
      description: '–¢–æ—Ä–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –ª–∏–Ω–µ–π–∫–∞ –∏ –Ω–∞—á–∞–ª–æ —É—á–µ–±–Ω–æ–≥–æ –≥–æ–¥–∞',
      icon: 'üéä',
      type: 'celebration',
      priority: 'medium'
    }
  ],
  // –≠–ª–µ–º–µ–Ω—Ç—ã DOM
  elements: {
    container: null,
    button: null
  },

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ
  currentDate: new Date(),
  updateInterval: null,
  isExpanded: false,

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
  init() {
    this.findElements();
    this.bindEvents();
    this.render();
    this.startUpdateTimer();
    console.log('üìÖ –í–∏–¥–∂–µ—Ç –≤–∞–∂–Ω—ã—Ö –¥–∞—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  },

  // –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ DOM
  findElements() {
    this.elements.container = document.getElementById('importantDatesContainer');
    this.elements.button = document.getElementById('showAllDatesBtn');
  },

  // –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
  bindEvents() {
    if (this.elements.button) {
      this.elements.button.addEventListener('click', () => {
        this.toggleExpanded();
      });
    }
  },

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  toggleExpanded() {
    this.isExpanded = !this.isExpanded;
    this.render();
    
    if (this.elements.button) {
      this.elements.button.classList.toggle('expanded', this.isExpanded);
      this.elements.button.innerHTML = `
        ${this.isExpanded ? '–°–∫—Ä—ã—Ç—å' : '–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–∞—Ç—ã'}
        <svg viewBox="0 0 24 24" fill="currentColor">
          <path d="M7.41 8.59L12 13.17l4.59-4.58L18 10l-6 6-6-6 1.41-1.41z"/>
        </svg>
      `;
    }
  },

  // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
  render() {
    if (!this.elements.container) return;

    const sortedDates = this.getSortedUpcomingDates();
    const displayCount = this.isExpanded ? sortedDates.length : 3;
    const datesToShow = sortedDates.slice(0, displayCount);
    
    this.elements.container.innerHTML = datesToShow.map(dateItem => 
      this.createDateItemHTML(dateItem)
    ).join('');
    
    if (this.elements.container.parentElement) {
      this.elements.container.parentElement.classList.toggle('dates-expanded', this.isExpanded);
    }
    
    this.updateCountdowns();
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –¥–∞—Ç
  getSortedUpcomingDates() {
    const now = new Date();
    
    return this.DATES
      .map(dateItem => ({
        ...dateItem,
        daysDiff: this.getDaysDifference(dateItem.date),
        status: this.getDateStatus(dateItem.date)
      }))
      .filter(dateItem => dateItem.daysDiff >= -1) // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞—Ç—ã –∑–∞ –¥–µ–Ω—å –¥–æ –∏ –≤—Å–µ –±—É–¥—É—â–∏–µ
      .sort((a, b) => new Date(a.date) - new Date(b.date));
  },

  // –°–æ–∑–¥–∞–Ω–∏–µ HTML –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–∞—Ç—ã
  createDateItemHTML(dateItem) {
    const { daysDiff, status } = dateItem;
    const countdownText = this.getCountdownText(daysDiff);
    
    return `
      <div class="date-item ${status}" data-id="${dateItem.id}">
        <div class="date-content">
          <h4 class="date-title">${dateItem.title}</h4>
          <p class="date-period">${dateItem.period}</p>
        </div>
        <div class="date-countdown">
          <div class="countdown-value">${countdownText.value}</div>
          <div class="countdown-label">${countdownText.label}</div>
        </div>
        ${dateItem.priority === 'critical' && daysDiff <= 7 && daysDiff >= 0 ? 
          '<div class="notification-badge">!</div>' : ''}
      </div>
    `;
  },  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–∞—Ç—ã
  getDateStatus(dateString) {
    const daysDiff = this.getDaysDifference(dateString);
    
    if (daysDiff < 0) return 'completed';
    if (daysDiff <= 3) return 'urgent';
    if (daysDiff <= 14) return 'soon';
    return '';
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–Ω–æ—Å—Ç–∏ –≤ –¥–Ω—è—Ö
  getDaysDifference(dateString) {
    const eventDate = new Date(dateString);
    const now = new Date();
    const diffTime = eventDate.setHours(0,0,0,0) - now.setHours(0,0,0,0);
    return Math.ceil(diffTime / (1000 * 60 * 60 * 24));
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞
  getCountdownText(daysDiff) {
    if (daysDiff < 0) {
      return { value: '–ó–∞–≤–µ—Ä—à–µ–Ω–æ', label: '' };
    }
    
    if (daysDiff === 0) {
      return { value: '–°–µ–≥–æ–¥–Ω—è', label: '!' };
    }
    
    if (daysDiff === 1) {      return { value: '–ó–∞–≤—Ç—Ä–∞', label: '!' };
    }
    
    if (daysDiff <= 7) {
      return { value: `${daysDiff} –¥–Ω.`, label: '–æ—Å—Ç–∞–ª–æ—Å—å' };
    }
    
    if (daysDiff <= 30) {
      return { value: `${daysDiff} –¥–Ω.`, label: '–¥–æ —Å–æ–±—ã—Ç–∏—è' };
    }
    
    const weeks = Math.floor(daysDiff / 7);
    return { value: `${weeks} –Ω–µ–¥.`, label: '–¥–æ —Å–æ–±—ã—Ç–∏—è' };
  },

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞
  updateCountdowns() {
    const dateItems = document.querySelectorAll('.date-item');
    
    dateItems.forEach(item => {
      const dateId = item.dataset.id;
      const dateItem = this.DATES.find(d => d.id === dateId);
      
      if (dateItem) {
        const daysDiff = this.getDaysDifference(dateItem.date);
        const status = this.getDateStatus(dateItem.date);
        const countdownText = this.getCountdownText(daysDiff);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —ç–ª–µ–º–µ–Ω—Ç–∞
        item.className = `date-item ${status}`;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞
        const countdownValue = item.querySelector('.countdown-value');
        const countdownLabel = item.querySelector('.countdown-label');
        
        if (countdownValue) countdownValue.textContent = countdownText.value;
        if (countdownLabel) countdownLabel.textContent = countdownText.label;
      }
    });
  },

  // –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  startUpdateTimer() {
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
    this.updateInterval = setInterval(() => {
      this.updateCountdowns();
      
      // –ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ –∫–∞–∂–¥—ã–π —á–∞—Å
      const now = new Date();
      if (now.getMinutes() === 0) {
        this.render();
      }
    }, 600000); // 10 –º–∏–Ω—É—Ç
  },

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä–∞
  stopUpdateTimer() {
    if (this.updateInterval) {
      clearInterval(this.updateInterval);
      this.updateInterval = null;
    }
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–∞–∂–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
  getNextImportantEvent() {
    const upcoming = this.getSortedUpcomingDates();
    return upcoming.find(event => event.priority === 'critical') || upcoming[0];
  },

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π —Å–µ–≥–æ–¥–Ω—è
  hasCriticalEventsToday() {
    const today = new Date().toISOString().split('T')[0];
    return this.DATES.some(event => 
      event.date === today && event.priority === 'critical'
    );
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  getNotifications() {
    const notifications = [];

    this.DATES.forEach(event => {
      const daysDiff = this.getDaysDifference(event.date);

      if (daysDiff === 0 && event.priority === 'critical') {
        notifications.push({
          type: 'critical',
          message: `–°–µ–≥–æ–¥–Ω—è: ${event.title}`,
          event: event
        });
      } else if (daysDiff === 1 && event.priority === 'critical') {
        notifications.push({
          type: 'warning',
          message: `–ó–∞–≤—Ç—Ä–∞: ${event.title}`,
          event: event
        });
      } else if (daysDiff <= 3 && event.priority === 'high') {
        notifications.push({
          type: 'info',
          message: `–ß–µ—Ä–µ–∑ ${daysDiff} –¥–Ω.: ${event.title}`,
          event: event
        });
      }
    });

    return notifications;
  },

  // –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–∞
  destroy() {
    this.stopUpdateTimer();
    if (this.elements.container) {
      this.elements.container.innerHTML = '';
    }
    console.log('üìÖ –í–∏–¥–∂–µ—Ç –≤–∞–∂–Ω—ã—Ö –¥–∞—Ç —É–Ω–∏—á—Ç–æ–∂–µ–Ω');
  }
};

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
window.ImportantDates = ImportantDates;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', () => {
  if (document.getElementById('importantDatesContainer')) {
    ImportantDates.init();
  }
});

// ===== –°–ö–†–ò–ü–¢ –î–õ–Ø –û–ë–ù–û–í–õ–ï–ù–ò–Ø –í–°–ï–• HTML –°–¢–†–ê–ù–ò–¶ –° PWA –ü–û–î–î–ï–†–ñ–ö–û–ô =====

const fs = require('fs');
const path = require('path');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ HTML —Ñ–∞–π–ª–æ–≤
function findHtmlFiles(dir, fileList = []) {
  const files = fs.readdirSync(dir);
  
  files.forEach(file => {
    const filePath = path.join(dir, file);
    const stat = fs.statSync(filePath);
    
    if (stat.isDirectory()) {
      findHtmlFiles(filePath, fileList);
    } else if (file.endsWith('.html') && file !== 'offline.html') {
      fileList.push(filePath);
    }
  });
  
  return fileList;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—É—Ç–∏ –∫ –∫–æ—Ä–Ω—é
function getRelativePath(filePath) {
  const relativePath = path.relative(path.dirname(filePath), './');
  return relativePath === '' ? './' : relativePath + '/';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è HTML —Ñ–∞–π–ª–∞
function updateHtmlFile(filePath) {
  let content = fs.readFileSync(filePath, 'utf8');
  let updated = false;
  
  const basePath = getRelativePath(filePath);
  
  // –î–æ–±–∞–≤–ª—è–µ–º PWA –º–µ—Ç–∞-—Ç–µ–≥–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
  if (!content.includes('theme-color')) {
    const metaInsert = `    <!-- PWA –º–µ—Ç–∞-—Ç–µ–≥–∏ -->
    <meta name="theme-color" content="#2F5E2F">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="default">
    
    `;
    
    content = content.replace(
      /(\s+<!-- Open Graph)/,
      metaInsert + '$1'
    );
    updated = true;
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ PWA CSS, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
  if (!content.includes('pwa.css')) {
    const cssPath = basePath + 'css/pwa.css';
    const cssLink = `    <link rel="stylesheet" href="${cssPath}">`;
    
    // –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π CSS —Ñ–∞–π–ª –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ –Ω–µ–≥–æ
    const lastCssMatch = content.match(/.*<link rel="stylesheet" href="[^"]*\.css"[^>]*>/g);
    if (lastCssMatch) {
      const lastCss = lastCssMatch[lastCssMatch.length - 1];
      content = content.replace(lastCss, lastCss + '\n' + cssLink);
      updated = true;
    }
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º PWA —Å–∫—Ä–∏–ø—Ç, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
  if (!content.includes('pwa.js')) {
    const jsPath = basePath + 'js/pwa.js';
    const jsScript = `    <script src="${jsPath}"></script>`;
    
    // –ò—â–µ–º main.js –∏ –¥–æ–±–∞–≤–ª—è–µ–º PWA —Å–∫—Ä–∏–ø—Ç –ø–µ—Ä–µ–¥ –Ω–∏–º
    if (content.includes('main.js')) {
      content = content.replace(
        /(\s+<script src="[^"]*main\.js"><\/script>)/,
        '\n' + jsScript + '$1'
      );
      updated = true;
    }
  }
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª, –µ—Å–ª–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
  if (updated) {
    fs.writeFileSync(filePath, content, 'utf8');
    console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω: ${filePath}`);
  } else {
    console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω: ${filePath} (—É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω)`);
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
  console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ HTML —Ñ–∞–π–ª–æ–≤ –¥–ª—è PWA...\n');
  
  const websiteDir = './';
  const htmlFiles = findHtmlFiles(websiteDir);
  
  console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ ${htmlFiles.length} HTML —Ñ–∞–π–ª–æ–≤:\n`);
  
  htmlFiles.forEach(file => {
    try {
      updateHtmlFile(file);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ${file}:`, error.message);
    }
  });
  
  console.log('\n‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
  console.log('\nüìù –ß—Ç–æ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ:');
  console.log('- PWA –º–µ—Ç–∞-—Ç–µ–≥–∏ (theme-color, apple-mobile-web-app)');
  console.log('- –°—Å—ã–ª–∫–∞ –Ω–∞ css/pwa.css');
  console.log('- –°–∫—Ä–∏–ø—Ç js/pwa.js');
  console.log('\nüöÄ –¢–µ–ø–µ—Ä—å –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç PWA —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å!');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main();
}

module.exports = { updateHtmlFile, findHtmlFiles };

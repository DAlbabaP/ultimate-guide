// ===== PWA –ú–û–î–£–õ–¨ –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø PROGRESSIVE WEB APP =====

const PWA = {  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
  config: {
    swPath: './sw.js',
    checkInterval: 60000, // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    showInstallPrompt: true,
    enableNotifications: true,
    cacheStrategy: 'cache-first'
  },

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ PWA
  state: {
    isInstalled: false,
    isOnline: navigator.onLine,
    swRegistration: null,
    deferredPrompt: null,
    isInstallable: false,
    updateAvailable: false
  },

  // –≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
  elements: {
    installButton: null,
    updateButton: null,
    offlineIndicator: null,
    installBanner: null
  },

  // ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø =====
  init() {
    console.log('üì± –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PWA –º–æ–¥—É–ª—è...');
    
    this.detectPWASupport();
    this.initializeElements();
    this.registerServiceWorker();
    this.bindEvents();
    this.checkOnlineStatus();
    this.createInstallBanner();
    
    console.log('‚úÖ PWA –º–æ–¥—É–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  },

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ PWA
  detectPWASupport() {
    const support = {
      serviceWorker: 'serviceWorker' in navigator,
      beforeInstallPrompt: 'onbeforeinstallprompt' in window,
      manifestApi: 'getInstalledRelatedApps' in navigator,
      notifications: 'Notification' in window,
      share: 'share' in navigator
    };

    console.log('üîç –ü–æ–¥–¥–µ—Ä–∂–∫–∞ PWA —Ñ—É–Ω–∫—Ü–∏–π:', support);
    return support;
  },

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
  initializeElements() {
    this.elements.installButton = document.getElementById('pwa-install-btn');
    this.elements.updateButton = document.getElementById('pwa-update-btn');
    this.elements.offlineIndicator = document.getElementById('offline-indicator');
    
    // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    this.createPWAElements();
  },

  // –°–æ–∑–¥–∞–Ω–∏–µ PWA —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
  createPWAElements() {
    // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–∞
    if (!this.elements.offlineIndicator) {
      const indicator = document.createElement('div');
      indicator.id = 'offline-indicator';
      indicator.className = 'offline-indicator hidden';
      indicator.innerHTML = `
        <div class="offline-content">
          <span class="offline-icon">üì°</span>
          <span class="offline-text">–†–∞–±–æ—Ç–∞–µ–º –≤ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ</span>
        </div>
      `;
      document.body.appendChild(indicator);
      this.elements.offlineIndicator = indicator;
    }

    // –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    if (!this.elements.updateButton) {
      const updateBtn = document.createElement('button');
      updateBtn.id = 'pwa-update-btn';
      updateBtn.className = 'pwa-update-btn hidden';
      updateBtn.innerHTML = `
        <span class="update-icon">üîÑ</span>
        <span class="update-text">–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</span>
      `;
      document.body.appendChild(updateBtn);
      this.elements.updateButton = updateBtn;
    }
  },

  // –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–Ω–Ω–µ—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
  createInstallBanner() {
    if (this.elements.installBanner) return;

    const banner = document.createElement('div');
    banner.id = 'pwa-install-banner';
    banner.className = 'pwa-install-banner hidden';
    banner.innerHTML = `
      <div class="install-banner-content">
        <div class="install-banner-info">
          <div class="install-banner-icon">üì±</div>
          <div class="install-banner-text">
            <div class="install-banner-title">–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</div>
            <div class="install-banner-description">
              –î–æ–±–∞–≤—å—Ç–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –Ω–∞ –¥–æ–º–∞—à–Ω–∏–π —ç–∫—Ä–∞–Ω –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
            </div>
          </div>
        </div>
        <div class="install-banner-actions">
          <button class="install-btn-primary" id="install-app-btn">
            –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
          </button>
          <button class="install-btn-secondary" id="close-install-banner">
            √ó
          </button>
        </div>
      </div>
    `;
    
    document.body.appendChild(banner);
    this.elements.installBanner = banner;
  },
  // ===== –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø SERVICE WORKER =====
  async registerServiceWorker() {
    if (!('serviceWorker' in navigator)) {
      console.warn('‚ö†Ô∏è Service Worker –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
      return;
    }

    try {
      console.log('üîÑ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è Service Worker –ø–æ –ø—É—Ç–∏:', this.config.swPath);
      const registration = await navigator.serviceWorker.register(this.config.swPath);
      this.state.swRegistration = registration;
      
      console.log('‚úÖ Service Worker –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:', registration);

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
      registration.addEventListener('updatefound', () => {
        this.handleSWUpdate(registration);
      });

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ Service Worker
      if (registration.active) {
        this.handleSWActivated();
      }

      // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
      this.startUpdateCheck();

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ Service Worker:', error);
      console.error('–ü—É—Ç—å –∫ SW —Ñ–∞–π–ª—É:', this.config.swPath);
      console.error('–¢–µ–∫—É—â–∏–π URL:', window.location.href);
    }
  },

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Service Worker
  handleSWUpdate(registration) {
    const newWorker = registration.installing;
    console.log('üîÑ –ù–∞–π–¥–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ Service Worker');

    newWorker.addEventListener('statechange', () => {
      if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {
        console.log('üì¶ –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –≥–æ—Ç–æ–≤–∞ –∫ —É—Å—Ç–∞–Ω–æ–≤–∫–µ');
        this.state.updateAvailable = true;
        this.showUpdateNotification();
      }
    });
  },

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ Service Worker
  handleSWActivated() {
    console.log('‚úÖ Service Worker –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    this.checkCacheStatus();
  },

  // –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
  startUpdateCheck() {
    setInterval(() => {
      if (this.state.swRegistration) {
        this.state.swRegistration.update();
      }
    }, this.config.checkInterval);
  },

  // ===== –£–°–¢–ê–ù–û–í–ö–ê PWA =====
  
  // –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
  bindEvents() {
    // –°–æ–±—ã—Ç–∏–µ –ø–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π PWA
    window.addEventListener('beforeinstallprompt', (e) => {
      e.preventDefault();
      this.state.deferredPrompt = e;
      this.state.isInstallable = true;
      this.showInstallPrompt();
    });

    // –°–æ–±—ã—Ç–∏–µ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ PWA
    window.addEventListener('appinstalled', () => {
      console.log('üì± PWA —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
      this.state.isInstalled = true;
      this.state.deferredPrompt = null;
      this.hideInstallPrompt();
      this.showNotification('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!', 'success');
    });

    // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ç–∏
    window.addEventListener('online', () => {
      this.state.isOnline = true;
      this.updateOnlineStatus();
      this.showNotification('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ', 'info');
    });

    window.addEventListener('offline', () => {
      this.state.isOnline = false;
      this.updateOnlineStatus();
      this.showNotification('–ü–µ—Ä–µ—Ö–æ–¥ –≤ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º', 'warning');
    });

    // –ö–Ω–æ–ø–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    this.bindButtonEvents();
  },

  // –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π –∫–Ω–æ–ø–æ–∫
  bindButtonEvents() {
    // –ö–Ω–æ–ø–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ –±–∞–Ω–Ω–µ—Ä–µ
    const installBtn = document.getElementById('install-app-btn');
    if (installBtn) {
      installBtn.addEventListener('click', () => this.installApp());
    }

    // –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –±–∞–Ω–Ω–µ—Ä–∞
    const closeBtn = document.getElementById('close-install-banner');
    if (closeBtn) {
      closeBtn.addEventListener('click', () => this.hideInstallPrompt());
    }

    // –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    if (this.elements.updateButton) {
      this.elements.updateButton.addEventListener('click', () => this.updateApp());
    }

    // –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if (this.elements.installButton) {
      this.elements.installButton.addEventListener('click', () => this.installApp());
    }
  },

  // –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–º–ø—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏
  showInstallPrompt() {
    if (!this.config.showInstallPrompt || this.state.isInstalled) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–∫—Ä—ã–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–∞–Ω–Ω–µ—Ä
    const hiddenTime = localStorage.getItem('pwa-install-hidden');
    if (hiddenTime && (Date.now() - parseInt(hiddenTime)) < 7 * 24 * 60 * 60 * 1000) {
      return; // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º 7 –¥–Ω–µ–π –ø–æ—Å–ª–µ —Å–∫—Ä—ã—Ç–∏—è
    }

    if (this.elements.installBanner) {
      this.elements.installBanner.classList.remove('hidden');
      
      // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
      setTimeout(() => {
        this.elements.installBanner.classList.add('visible');
      }, 100);
    }
  },

  // –°–∫—Ä—ã—Ç—å –ø—Ä–æ–º–ø—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏
  hideInstallPrompt() {
    if (this.elements.installBanner) {
      this.elements.installBanner.classList.remove('visible');
      setTimeout(() => {
        this.elements.installBanner.classList.add('hidden');
      }, 300);
      
      // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∫—Ä—ã–ª –±–∞–Ω–Ω–µ—Ä
      localStorage.setItem('pwa-install-hidden', Date.now().toString());
    }
  },

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  async installApp() {
    if (!this.state.deferredPrompt) {
      this.showNotification('–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞', 'error');
      return;
    }

    try {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–º–ø—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏
      this.state.deferredPrompt.prompt();
      
      // –ñ–¥–µ–º –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const result = await this.state.deferredPrompt.userChoice;
      
      if (result.outcome === 'accepted') {
        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–≥–ª–∞—Å–∏–ª—Å—è –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É');
        this.trackEvent('pwa_install_accepted');
      } else {
        console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω–∏–ª —É—Å—Ç–∞–Ω–æ–≤–∫—É');
        this.trackEvent('pwa_install_declined');
      }

      this.state.deferredPrompt = null;
      this.hideInstallPrompt();

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ PWA:', error);
      this.showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ', 'error');
    }
  },

  // ===== –û–ë–ù–û–í–õ–ï–ù–ò–Ø =====

  // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
  showUpdateNotification() {
    if (this.elements.updateButton) {
      this.elements.updateButton.classList.remove('hidden');
      this.elements.updateButton.classList.add('visible');
    }

    this.showNotification('–î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', 'info', {
      persistent: true,
      action: {
        text: '–û–±–Ω–æ–≤–∏—Ç—å',
        callback: () => this.updateApp()
      }
    });
  },

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  async updateApp() {
    if (!this.state.swRegistration) return;

    try {
      // –ì–æ–≤–æ—Ä–∏–º –Ω–æ–≤–æ–º—É Service Worker –≤–∑—è—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
      const newWorker = this.state.swRegistration.waiting;
      if (newWorker) {
        newWorker.postMessage({ type: 'SKIP_WAITING' });
      }

      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
      window.location.reload();

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
      this.showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏', 'error');
    }
  },

  // ===== –°–¢–ê–¢–£–° –°–ï–¢–ò =====

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–∞
  checkOnlineStatus() {
    this.updateOnlineStatus();
  },

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–∞
  updateOnlineStatus() {
    if (!this.elements.offlineIndicator) return;

    if (this.state.isOnline) {
      this.elements.offlineIndicator.classList.add('hidden');
      this.elements.offlineIndicator.classList.remove('visible');
    } else {
      this.elements.offlineIndicator.classList.remove('hidden');
      this.elements.offlineIndicator.classList.add('visible');
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º CSS –∫–ª–∞—Å—Å –Ω–∞ body
    document.body.classList.toggle('offline', !this.state.isOnline);
    document.body.classList.toggle('online', this.state.isOnline);
  },

  // ===== –ö–≠–®–ò–†–û–í–ê–ù–ò–ï =====

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫—ç—à–∞
  async checkCacheStatus() {
    try {
      const cacheInfo = await this.getCacheInfo();
      console.log('üì¶ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—ç—à–µ:', cacheInfo);
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –æ—Ñ–ª–∞–π–Ω —Ä–∞–±–æ—Ç–µ
      if (Object.keys(cacheInfo).length > 0) {
        this.showNotification('–°–∞–π—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ –≤ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ', 'success');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—ç—à–∞:', error);
    }
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—ç—à–µ
  async getCacheInfo() {
    if (!this.state.swRegistration) return {};

    return new Promise((resolve) => {
      const messageChannel = new MessageChannel();
      messageChannel.port1.onmessage = (event) => {
        if (event.data.type === 'CACHE_INFO') {
          resolve(event.data.payload);
        }
      };

      this.state.swRegistration.active.postMessage(
        { type: 'GET_CACHE_INFO' },
        [messageChannel.port2]
      );
    });
  },

  // –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
  async clearCache() {
    if (!this.state.swRegistration) return;

    return new Promise((resolve) => {
      const messageChannel = new MessageChannel();
      messageChannel.port1.onmessage = (event) => {
        if (event.data.type === 'CACHE_CLEARED') {
          resolve();
        }
      };

      this.state.swRegistration.active.postMessage(
        { type: 'CLEAR_CACHE' },
        [messageChannel.port2]
      );
    });
  },

  // –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  cacheCurrentPage() {
    if (!this.state.swRegistration) return;

    this.state.swRegistration.active.postMessage({
      type: 'CACHE_PAGE',
      payload: { url: window.location.href }
    });
  },

  // ===== –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø =====

  // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  showNotification(message, type = 'info', options = {}) {
    const notification = document.createElement('div');
    notification.className = `pwa-notification pwa-notification--${type}`;
    
    if (options.persistent) {
      notification.classList.add('persistent');
    }

    notification.innerHTML = `
      <div class="notification-content">
        <span class="notification-icon">${this.getNotificationIcon(type)}</span>
        <span class="notification-message">${message}</span>
        ${options.action ? `
          <button class="notification-action">${options.action.text}</button>
        ` : ''}
        <button class="notification-close">√ó</button>
      </div>
    `;

    document.body.appendChild(notification);

    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
    setTimeout(() => {
      notification.classList.add('visible');
    }, 100);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    const closeBtn = notification.querySelector('.notification-close');
    closeBtn.addEventListener('click', () => {
      this.hideNotification(notification);
    });

    if (options.action) {
      const actionBtn = notification.querySelector('.notification-action');
      actionBtn.addEventListener('click', () => {
        options.action.callback();
        this.hideNotification(notification);
      });
    }

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ
    if (!options.persistent) {
      setTimeout(() => {
        this.hideNotification(notification);
      }, 5000);
    }

    return notification;
  },

  // –°–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  hideNotification(notification) {
    notification.classList.remove('visible');
    setTimeout(() => {
      if (notification.parentNode) {
        notification.parentNode.removeChild(notification);
      }
    }, 300);
  },

  // –ü–æ–ª—É—á–∏—Ç—å –∏–∫–æ–Ω–∫—É –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  getNotificationIcon(type) {
    const icons = {
      success: '‚úÖ',
      error: '‚ùå',
      warning: '‚ö†Ô∏è',
      info: '‚ÑπÔ∏è'
    };
    return icons[type] || icons.info;
  },

  // ===== –ê–ù–ê–õ–ò–¢–ò–ö–ê =====

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π PWA
  trackEvent(eventName, data = {}) {
    console.log('üìä PWA Event:', eventName, data);
    
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π
    if (typeof gtag !== 'undefined') {
      gtag('event', eventName, {
        event_category: 'PWA',
        ...data
      });
    }
  },

  // ===== –£–¢–ò–õ–ò–¢–´ =====

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
  async isAppInstalled() {
    if ('getInstalledRelatedApps' in navigator) {
      try {
        const relatedApps = await navigator.getInstalledRelatedApps();
        return relatedApps.length > 0;
      } catch (error) {
        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);
      }
    }
    
    // Fallback –ø—Ä–æ–≤–µ—Ä–∫–∞
    return window.matchMedia('(display-mode: standalone)').matches ||
           window.navigator.standalone === true;
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ PWA
  getInfo() {
    return {
      ...this.state,
      support: this.detectPWASupport(),
      isStandalone: window.matchMedia('(display-mode: standalone)').matches
    };
  }
};

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', () => {
    PWA.init();
  });
} else {
  PWA.init();
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
window.PWA = PWA;

const fs = require('fs');
const path = require('path');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –≤—Å–µ—Ö HTML —Ñ–∞–π–ª–æ–≤
function findHtmlFiles(dir, files = []) {
    const entries = fs.readdirSync(dir, { withFileTypes: true });
    
    for (const entry of entries) {
        const fullPath = path.join(dir, entry.name);
        if (entry.isDirectory()) {
            findHtmlFiles(fullPath, files);
        } else if (entry.isFile() && entry.name.endsWith('.html')) {
            files.push(fullPath);
        }
    }
    
    return files;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ PWA —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Ñ–∞–π–ª–µ
function checkPwaElements(filePath) {
    try {
        const content = fs.readFileSync(filePath, 'utf8');
        const relativePath = path.relative(path.join(__dirname), filePath);
        
        // –ò—Å–∫–ª—é—á–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ (–æ–Ω–∏ –≤–∫–ª—é—á–∞—é—Ç—Å—è –≤ –æ—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
        const isComponent = relativePath.includes('components' + path.sep);
        const isOfflinePage = relativePath.includes('offline.html');
        
        const checks = {
            manifest: content.includes('rel="manifest"'),
            themeColor: content.includes('name="theme-color"'),
            pwaCss: content.includes('pwa.css'),
            pwaJs: content.includes('pwa.js'),
            appleMeta: content.includes('apple-mobile-web-app-capable')
        };
        
        return {
            filePath: relativePath,
            isComponent,
            isOfflinePage,
            checks,
            isValid: isComponent || isOfflinePage || Object.values(checks).every(check => check)
        };
        
    } catch (error) {
        return {
            filePath: path.relative(path.join(__dirname), filePath),
            error: error.message,
            isValid: false
        };
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
    console.log('üîç –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ PWA —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö HTML —Ñ–∞–π–ª–æ–≤...\n');
    
    const websiteDir = __dirname;
    const htmlFiles = findHtmlFiles(websiteDir);
    
    const results = htmlFiles.map(checkPwaElements);
    
    // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    const validPages = results.filter(r => r.isValid && !r.isComponent);
    const invalidPages = results.filter(r => !r.isValid && !r.isComponent);
    const components = results.filter(r => r.isComponent);
    const offlinePages = results.filter(r => r.isOfflinePage);
    
    console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò PWA:\n');
    
    console.log(`‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (${validPages.length}):`);
    validPages.forEach(page => {
        console.log(`   ‚úÖ ${page.filePath}`);
    });
    
    if (invalidPages.length > 0) {
        console.log(`\n‚ùå –°—Ç—Ä–∞–Ω–∏—Ü—ã —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏ (${invalidPages.length}):`);
        invalidPages.forEach(page => {
            console.log(`   ‚ùå ${page.filePath}`);
            if (page.checks) {
                Object.entries(page.checks).forEach(([key, value]) => {
                    if (!value) {
                        console.log(`      - –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: ${key}`);
                    }
                });
            }
            if (page.error) {
                console.log(`      - –û—à–∏–±–∫–∞: ${page.error}`);
            }
        });
    }
    
    console.log(`\nüìÅ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (${components.length}) - –ø—Ä–æ–ø—É—â–µ–Ω—ã –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ:`);
    components.forEach(component => {
        console.log(`   üìÅ ${component.filePath}`);
    });
    
    if (offlinePages.length > 0) {
        console.log(`\nüîå –û—Ñ–ª–∞–π–Ω —Å—Ç—Ä–∞–Ω–∏—Ü—ã (${offlinePages.length}):`);
        offlinePages.forEach(page => {
            console.log(`   üîå ${page.filePath}`);
        });
    }
    
    console.log('\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
    console.log(`   üìÑ –í—Å–µ–≥–æ HTML —Ñ–∞–π–ª–æ–≤: ${htmlFiles.length}`);
    console.log(`   ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${validPages.length}`);
    console.log(`   ‚ùå –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${invalidPages.length}`);
    console.log(`   üìÅ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: ${components.length}`);
    console.log(`   üîå –û—Ñ–ª–∞–π–Ω —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${offlinePages.length}`);
    
    if (invalidPages.length === 0) {
        console.log('\nüéâ –í–°–ï –°–¢–†–ê–ù–ò–¶–´ –ö–û–†–†–ï–ö–¢–ù–û –ù–ê–°–¢–†–û–ï–ù–´ –î–õ–Ø PWA!');
        console.log('‚úÖ –í–∞—à —Å–∞–π—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ –∫–∞–∫ Progressive Web App');
        console.log('\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
        console.log('1. –ó–∞–º–µ–Ω–∏—Ç–µ SVG-–∑–∞–≥–ª—É—à–∫—É –Ω–∞ –Ω–∞—Å—Ç–æ—è—â–∏–µ –∏–∫–æ–Ω–∫–∏ –≤ manifest.json');
        console.log('2. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ PWA –≤ –±—Ä–∞—É–∑–µ—Ä–µ (F12 ‚Üí Application)');
        console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –æ—Ñ–ª–∞–π–Ω-—Ä–µ–∂–∏–º');
    } else {
        console.log('\n‚ö†Ô∏è  –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ –° PWA');
        console.log('–ò—Å–ø—Ä–∞–≤—å—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –≤—ã—à–µ –ø—Ä–æ–±–ª–µ–º—ã –¥–ª—è –ø–æ–ª–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ PWA');
    }
}

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
    main();
}

module.exports = { findHtmlFiles, checkPwaElements };

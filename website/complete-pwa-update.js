const fs = require('fs');
const path = require('path');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –≤—Å–µ—Ö HTML —Ñ–∞–π–ª–æ–≤
function findHtmlFiles(dir, files = []) {
    const entries = fs.readdirSync(dir, { withFileTypes: true });
    
    for (const entry of entries) {
        const fullPath = path.join(dir, entry.name);
        if (entry.isDirectory()) {
            findHtmlFiles(fullPath, files);
        } else if (entry.isFile() && entry.name.endsWith('.html')) {
            files.push(fullPath);
        }
    }
    
    return files;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—É—Ç–∏ –∫ –∫–æ—Ä–Ω—é —Å–∞–π—Ç–∞
function getRelativePathToRoot(filePath) {
    const relativePath = path.relative(path.join(__dirname), filePath);
    const depth = relativePath.split(path.sep).length - 1;
    
    if (depth === 0) {
        return './'; // –î–ª—è —Ñ–∞–π–ª–æ–≤ –≤ –∫–æ—Ä–Ω–µ
    }
    
    return '../'.repeat(depth);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö PWA —ç–ª–µ–º–µ–Ω—Ç–æ–≤
function updateHtmlFile(filePath) {
    try {
        const content = fs.readFileSync(filePath, 'utf8');
        let updatedContent = content;
        let hasChanges = false;
        
        const rootPath = getRelativePathToRoot(filePath);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ manifest.json
        if (!content.includes('rel="manifest"')) {
            console.log(`‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç manifest –≤: ${filePath}`);
            
            // –ò—â–µ–º –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ (–ø–æ—Å–ª–µ viewport meta –∏–ª–∏ –≤ head)
            const viewportIndex = content.indexOf('<meta name="viewport"');
            if (viewportIndex !== -1) {
                const nextLineIndex = content.indexOf('\n', viewportIndex);
                if (nextLineIndex !== -1) {
                    const insertPoint = nextLineIndex + 1;
                    const manifestLink = `    <link rel="manifest" href="${rootPath}manifest.json">\n`;
                    updatedContent = updatedContent.slice(0, insertPoint) + manifestLink + updatedContent.slice(insertPoint);
                    hasChanges = true;
                    console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω manifest: ${manifestLink.trim()}`);
                }
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ apple-mobile-web-app-capable
        if (!content.includes('apple-mobile-web-app-capable')) {
            console.log(`‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç apple-mobile-web-app-capable –≤: ${filePath}`);
            
            // –ò—â–µ–º –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –ø–æ—Å–ª–µ theme-color
            const themeColorIndex = content.indexOf('<meta name="theme-color"');
            if (themeColorIndex !== -1) {
                const nextLineIndex = updatedContent.indexOf('\n', themeColorIndex);
                if (nextLineIndex !== -1) {
                    const insertPoint = nextLineIndex + 1;
                    const appleMeta = `    <meta name="apple-mobile-web-app-capable" content="yes">\n    <meta name="apple-mobile-web-app-status-bar-style" content="default">\n`;
                    updatedContent = updatedContent.slice(0, insertPoint) + appleMeta + updatedContent.slice(insertPoint);
                    hasChanges = true;
                    console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã Apple meta —Ç–µ–≥–∏`);
                }
            }
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –µ—Å–ª–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if (hasChanges) {
            fs.writeFileSync(filePath, updatedContent, 'utf8');
            console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —Ñ–∞–π–ª: ${filePath}\n`);
        } else {
            console.log(`‚úÖ –§–∞–π–ª —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ PWA —ç–ª–µ–º–µ–Ω—Ç—ã: ${filePath}\n`);
        }
        
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ ${filePath}:`, error.message);
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è PWA –¥–ª—è –≤—Å–µ—Ö HTML —Ñ–∞–π–ª–æ–≤...\n');
    
    const websiteDir = __dirname;
    const htmlFiles = findHtmlFiles(websiteDir);
    
    console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ ${htmlFiles.length} HTML —Ñ–∞–π–ª–æ–≤:\n`);
    
    htmlFiles.forEach(file => {
        console.log(`üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é: ${file}`);
        updateHtmlFile(file);
    });
    
    console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    console.log('\nüìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
    console.log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É PWA –≤ –±—Ä–∞—É–∑–µ—Ä–µ (F12 ‚Üí Application ‚Üí Manifest/Service Workers)');
    console.log('2. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –æ—Ñ–ª–∞–π–Ω-—Ä–µ–∂–∏–º');
    console.log('3. –ó–∞–º–µ–Ω–∏—Ç–µ SVG-–∑–∞–≥–ª—É—à–∫—É –Ω–∞ –Ω–∞—Å—Ç–æ—è—â–∏–µ –∏–∫–æ–Ω–∫–∏ –≤ manifest.json');
    console.log('4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –ø—É—Ç–µ–π –∫ PWA-—Ñ–∞–π–ª–∞–º');
}

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
    main();
}

module.exports = { findHtmlFiles, updateHtmlFile, getRelativePathToRoot };
